allprojects {
	group = 'net.seabears.campsites'
	version = '0.0.1-SNAPSHOT'
}

def javaProjects = [project(':core'), project(':database'), project(':backend'), project(':api')]

configure(javaProjects) {
	apply plugin: 'java'
	apply plugin: 'checkstyle'

	ext.springBootVersion = '2.0.0.M6'
	ext.springDataVersion = '2.0.1.RELEASE'
	ext.springVersion = '5.0.1.RELEASE'

	sourceCompatibility = 9
	targetCompatibility = 9

	afterEvaluate {
		repositories {
			mavenCentral()
			maven { url 'https://repo.spring.io/snapshot' }
			maven { url 'https://repo.spring.io/milestone' }
			maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } // for junit plugin
		}

		jar {
			inputs.property("moduleName", moduleName)
			manifest {
				attributes('Automatic-Module-Name': moduleName)
			}
		}

		compileJava {
			inputs.property("moduleName", moduleName)
			doFirst {
				options.compilerArgs = [
						'--module-path', classpath.asPath,
						'--add-modules', 'java.xml.bind',
						'--add-reads', "$moduleName=java.xml.bind",
						'--patch-module', "$moduleName=" + files(sourceSets.main.java.srcDirs).asPath,
				]
				classpath = files()
			}
		}

		compileTestJava {
			inputs.property("moduleName", moduleName)
			inputs.property("testModules", testModules)
			doFirst {
				options.compilerArgs = [
						'--module-path', classpath.asPath,
						'--add-modules', testModules,
						'--add-reads', "$moduleName=$testModules",
						'--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
				]
				classpath = files()
			}
		}

		test {
			inputs.property("moduleName", moduleName)
			inputs.property("testModules", testModules)
			doFirst {
				jvmArgs = [
						'--module-path', classpath.asPath,
						'--add-modules', 'ALL-MODULE-PATH',
						'--add-reads', "$moduleName=$testModules",
						'--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
				]
				classpath = files()
			}
		}

		task testTemp(type: Exec, dependsOn: compileTestJava) {
			executable = 'java'
			args = [
					'--module-path', files(configurations.compileClasspath, configurations.testRuntimeClasspath, compileTestJava.destinationDir).asPath,
					'--add-modules', 'ALL-MODULE-PATH',
					'--module', 'org.junit.platform.console',
					'--scan-modules',
					'--details', 'TREE',
					'--reports-dir', "${buildDir}/test-results/junit-platform"
			]
		}

		checkstyle {
			checkstyleMain.exclude '**/module-info.java'
			configDir = file("$rootDir/config/checkstyle")
			toolVersion = '8.2'
		}
	}
}
